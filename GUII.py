# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
from tkinter import filedialog, messagebox
import pandas as pd
import PyPDF2
import docx
from PyQt6 import QtCore, QtGui, QtWidgets
from digitalSignature import digitalSignature

class Ui_MainWindow(object):
    def __init__(self):
        self.ds = digitalSignature()
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1086, 600)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70, 60, 91, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(30, 300, 111, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(590, 60, 71, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(560, 300, 111, 16))
        self.label_4.setObjectName("label_4")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(420, 60, 81, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.open_file1)
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(420, 120, 81, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.mainSign)
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(410, 290, 81, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.open_file2)
        self.pushButton_4 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(950, 60, 93, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.saveFile)
        self.pushButton_5 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(940, 340, 93, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.mainVerify)
        self.textBrowser = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(170, 46, 221, 171))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser_3 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textBrowser_3.setGeometry(QtCore.QRect(683, 46, 231, 171))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.pushButton_6 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(940, 290, 81, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.open_file3)
        self.textBrowser_2 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(170, 280, 221, 171))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.textBrowser_4 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textBrowser_4.setGeometry(QtCore.QRect(690, 280, 221, 161))
        self.textBrowser_4.setObjectName("textBrowser_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1086, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Văn bản gốc"))
        self.label_2.setText(_translate("MainWindow", "Văn bản nhận được"))
        self.label_3.setText(_translate("MainWindow", "Chữ ký gốc"))
        self.label_4.setText(_translate("MainWindow", "Chữ ký nhận được"))
        self.pushButton.setText(_translate("MainWindow", "Mở File"))
        self.pushButton_2.setText(_translate("MainWindow", "Ký"))
        self.pushButton_3.setText(_translate("MainWindow", "Mở File"))
        self.pushButton_4.setText(_translate("MainWindow", "Lưu File"))
        self.pushButton_5.setText(_translate("MainWindow", "Xác minh "))
        self.pushButton_6.setText(_translate("MainWindow", "Mở File"))

    def open_file1(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Tất cả tệp", "*.*"), ("Word files", "*.docx"), ("PDF files", "*.pdf"), ("Text files", "*.txt"), ("Image files", "*.jpg;*.png"),
            ("Excel files", "*.xlsx")]
        )
        if file_path:
            if file_path.endswith('.pdf'):
                with open(file_path, 'rb') as file:
                    reader = PyPDF2.PdfReader(file)
                    num_pages = len(reader.pages)
                    text = ""
                    for i in range(num_pages):
                        text += reader.pages[i].extract_text() + "\n"
                    self.textBrowser.setText(text)
            elif file_path.endswith('.txt'):
                with open(file_path, 'r') as file:
                    text = file.read()
                    self.textBrowser.setText(text)
            elif file_path.endswith('.docx'):
                doc = docx.Document(file_path)
                text = ""
                for paragraph in doc.paragraphs:
                    text += paragraph.text + "\n"
                self.textBrowser.setText(text)
            elif file_path.endswith('.xlsx'):
                df = pd.read_excel(file_path)
                self.textBrowser.setText(df.to_string())

    def open_file2(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Tất cả tệp", "*.*"), ("Word files", "*.docx"), ("PDF files", "*.pdf"), ("Text files", "*.txt")]
        )
        if file_path:
            if file_path.endswith('.pdf'):
                with open(file_path, 'rb') as file:
                    reader = PyPDF2.PdfReader(file)
                    num_pages = len(reader.pages)
                    text = ""
                    for i in range(num_pages):
                        text += reader.pages[i].extract_text() + "\n"
                    self.textBrowser_2.setText(text)
            elif file_path.endswith('.txt'):
                with open(file_path, 'r') as file:
                    text = file.read()
                    self.textBrowser_2.setText(text)
            elif file_path.endswith('.docx'):
                doc = docx.Document(file_path)
                text = ""
                for paragraph in doc.paragraphs:
                    text += paragraph.text + "\n"
                self.textBrowser_2.setText(text)
            elif file_path.endswith('.xlsx'):
                df = pd.read_excel(file_path)
                self.textBrowser_2.setText(df.to_string())

    def open_file3(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Tất cả tệp", "*.*"), ("Word files", "*.docx"), ("PDF files", "*.pdf"), ("Text files", "*.txt")]
        )
        if file_path:
            if file_path.endswith('.pdf'):
                with open(file_path, 'rb') as file:
                    reader = PyPDF2.PdfReader(file)
                    num_pages = len(reader.pages)
                    text = ""
                    for i in range(num_pages):
                        text += reader.pages[i].extract_text() + "\n"
                    self.textBrowser_4.setText(text)
            elif file_path.endswith('.txt'):
                with open(file_path, 'r') as file:
                    text = file.read()
                    self.textBrowser_4.setText(text)
            elif file_path.endswith('.docx'):
                doc = docx.Document(file_path)
                text = ""
                for paragraph in doc.paragraphs:
                    text += paragraph.text + "\n"
                self.textBrowser_4.setText(text)
            elif file_path.endswith('.xlsx'):
                df = pd.read_excel(file_path)
                self.textBrowser_4.setText(df.to_string())
    def saveFile(self):
        # Lấy nội dung từ textBrowser_3
        text = self.textBrowser_3.toPlainText()

        # Mở hộp thoại để chọn vị trí và tên file
        file = filedialog.asksaveasfile(defaultextension='.txt',
                                        filetypes=[("Text file", "*.txt")])

        # Kiểm tra xem người dùng đã chọn một file hay chưa
        if file:
            # Ghi nội dung vào file
            file.write(text)
            # Đóng file
            file.close()

    def mainSign(self):
        # Tạo một đối tượng digitalSignature


        # Lấy nội dung từ textBrowser
        message = self.textBrowser.toPlainText()

        message_int = self.ds.text_to_int(message)
        # Tạo chữ ký
        signature = self.ds.sign(message_int)

        # Hiển thị chữ ký trong textBrowser_2
        self.textBrowser_3.setText(str(signature))

    def mainVerify(self):

        message = self.textBrowser_2.toPlainText()
        #print("message: ",message)
        message_int = self.ds.text_to_int(message)

        # Lấy nội dung chữ ký từ textBrowser_4 và chuyển đổi thành tuple
        signature_text = self.textBrowser_4.toPlainText()

        signature_tuple = eval(signature_text)
        #print("signature: ", signature_tuple)
        # Kiểm tra và hiển thị kết quả
        if self.ds.verify(message_int, signature_tuple):
            messagebox.showinfo(message="Chữ ký chính xác!")
        else:
            messagebox.showinfo(message="Chữ ký không chính xác!")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
